// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace DownloadPolicies
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using MainApp;
    using Models;
    using System.Linq;

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {


        public void perform_Policy_Download(IEnumerable<PolicyDownloadModel> result)
        {
            WinButton uINextButton = this.UIDownloadWizardWindow.UINextWindow.UINextButton;
            WinWindow uITxtUserIdWindow = this.UIDownloadWizardWindow.UIEnterProducerWebsiteGroup.UITxtUserIdWindow;
            WinEdit uITxtUserIdEdit = this.UIDownloadWizardWindow.UITxtUserIdWindow.UITxtUserIdEdit;
            WinEdit uITxtPasswordEdit = this.UIDownloadWizardWindow.UITxtPasswordWindow.UITxtPasswordEdit;
            WinEdit uITxtPolicyNoEdit = this.UIDownloadWizardWindow.UITxtPolicyNoWindow.UITxtPolicyNoEdit;

            WinButton uIItemButton = this.UIDownloadWizardWindow.UIItemWindow.UIItemButton;
            WinListItem uIItem7667767ListItem = this.UIDownloadWizardWindow.UILvwSummaryList.UIItem7667767ListItem;
            WinList uILvwSummaryList = this.UIDownloadWizardWindow.UILvwSummaryWindow.UILvwSummaryList;
            WinButton uICloseButton = this.UIDownloadWizardWindow.UICloseWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIWinLegacyWindow.UIWinLegacyTitleBar.UICloseButton;

            WinEdit uITxtDOBEdit = this.UIDownloadWizardWindow.UIDOBWindow.UITxtDOBEdit;
            WinEdit uITxtAlphaEdit = this.UIDownloadWizardWindow.UITxtAlphaWindow.UITxtAlphaEdit;

            WinEdit uITxtFullPathEdit = this.UISelectDownloadExecutWindow.UIDArvindSoftwaresQTODWindow.UITxtFullPathEdit;
            WinButton uICancelButton = this.UISelectDownloadExecutWindow.UICancelWindow.UICancelButton;


            try
            {
                // Click '&Next >' button
                Mouse.Click(uINextButton, new Point(35, 14));

                // Click 'txtUserId' window
                Mouse.Click(uITxtUserIdWindow, new Point(12, -1));
                uITxtUserIdEdit.WaitForControlExist();

                Mouse.Click(uITxtUserIdEdit);
                // Type User Name from Excel
                uITxtUserIdEdit.Text = "10190163";

                uITxtUserIdEdit.WaitForControlExist();

                // Type '{Tab}' in 'txtUserId' text box
                Keyboard.SendKeys(uITxtUserIdEdit, this.BrighthousePolicyDownloadParams.UITxtUserIdEditSendKeys, ModifierKeys.None);

                // Type '********' in 'txtPassword' text box
               // Keyboard.SendKeys(uITxtPasswordEdit, this.BrighthousePolicyDownloadParams.UITxtPasswordEditSendKeys, true);
                uITxtPasswordEdit.Text = "metlife1";
                // Click '&Next >' button
                Mouse.Click(uINextButton, new Point(47, 8));


                foreach (PolicyDownloadModel policy in result)
                {
                    // Type '7667767' in 'txtPolicyNo' text box
                    uITxtPolicyNoEdit.Text = policy.policyNo.Trim();

                    try
                    {
                        if (policy.distribution == "MLFS")
                        {

                            if (policy.DOB != "")
                            {
                                uITxtDOBEdit.Text = "02/02/2016";
                            }
                            if (policy.alpha != null)
                            {
                                uITxtAlphaEdit.Text = policy.alpha;
                                Keyboard.SendKeys(uITxtAlphaEdit, " ", ModifierKeys.None);
                            }
                        }
                        else if (policy.distribution == "NELICO")
                        {
                            if (policy.alpha != null)
                            {
                                uITxtAlphaEdit.Text = policy.alpha;
                                Keyboard.SendKeys(uITxtAlphaEdit, " ", ModifierKeys.None);
                            }
                        }
                        // Click '>' button
                        Mouse.Click(uIItemButton, new Point(2, 7));
                    }
                    catch
                    {
                        policy.status = "FAILED--POLICY DOWNLOAD";
                        policy.additional_Comments = "Error while inputting the Policy number in the Policy Download Screen.";
                        continue;
                    }

                }

                // Click '&Next >' button
                Mouse.Click(uINextButton, new Point(38, 15));

                try
                {

             //       uICloseButton.WaitForControlEnabled();
                 uICancelButton.WaitForControlNotExist();

                    SavePolicyDownloadLog(uILvwSummaryList, result, false);
                }
                catch
                {
                    if (uICancelButton.Exists)
                    {
                        Mouse.Click(uICancelButton, new Point(18, 17));
                        SavePolicyDownloadLog(uILvwSummaryList, result, true);
                    }
                }

                // Click 'Close' button
                Mouse.Click(uICloseButton, new Point(31, 13));

            }

            // Click 'Close' button
            //    Mouse.Click(uICloseButton1, new Point(15, 2));
            catch (Exception e)
            {
                //WRITELOG
                 
            }
        }

        private void SavePolicyDownloadLog(WinList uILvwSummaryList, IEnumerable<PolicyDownloadModel> result, bool utilityError)
        {
            foreach (WinControl item in uILvwSummaryList.Items)
            {

                PolicyDownloadModel tmp_policy = result.Where(obj => obj.policyNo.Trim() == item.Name).First();

                WinListItem listItem = new WinListItem(item);
                if (utilityError)
                {
                    tmp_policy.status = "FAILED--POLICY DOWNLOAD";
                    tmp_policy.additional_Comments = tmp_policy.distribution + " Utility Error. Please correct the Utility's Path";
                }
                else
                {
                    if ((listItem.AccessibleDescription == null))
                    {
                        tmp_policy.status = "FAILED--POLICY DOWNLOAD";
                        tmp_policy.additional_Comments = "Error in downloading the policy";

                    }
                    else if ((listItem.AccessibleDescription.ToUpper().Trim() == "MESSAGE: SUCCESS"))
                    {
                        tmp_policy.status = "SUCCESS--POLICY DOWNLOAD";

                    }
                    else
                    {
                        tmp_policy.status = "FAILED--POLICY DOWNLOAD";
                        tmp_policy.additional_Comments = "Error in downloading the policy - Message : " + listItem.AccessibleDescription; 
                    }
                }

            }
        }



        /// <summary>
        /// BrighthousePolicyDownload - Use 'BrighthousePolicyDownloadParams' to pass parameters into this method.
        /// </summary>
        public void BrighthousePolicyDownload()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow.UIOpenComboBox;
            WinEdit uIOpenEdit = this.UIRunWindow.UIItemWindow1.UIOpenEdit;
            WinTitleBar uIWinLegacyTitleBar = this.UIWinLegacyWindow.UIWinLegacyTitleBar;
            WinButton uIRequestPolicyButton = this.UIWinLegacyWindow.UI_mainToolStripToolBar.UIRequestPolicyButton;
            WinRadioButton uIMetLifeRadioButton = this.UIDownloadWizardWindow.UIMetLifeWindow.UIMetLifeRadioButton;
            WinRadioButton uIGenAmRadioButton = this.UIDownloadWizardWindow.UIGenAmWindow.UIGenAmRadioButton;
            WinRadioButton uINELICORadioButton = this.UIDownloadWizardWindow.UINELICOWindow.UINELICORadioButton;
            WinRadioButton uIBrighthouseFinancialRadioButton = this.UIDownloadWizardWindow.UIBrighthouseFinancialWindow.UIBrighthouseFinancialRadioButton;
            WinButton uINextButton = this.UIDownloadWizardWindow.UINextWindow.UINextButton;
            WinWindow uITxtUserIdWindow = this.UIDownloadWizardWindow.UIEnterProducerWebsiteGroup.UITxtUserIdWindow;
            WinEdit uITxtUserIdEdit = this.UIDownloadWizardWindow.UITxtUserIdWindow.UITxtUserIdEdit;
            WinEdit uITxtPasswordEdit = this.UIDownloadWizardWindow.UITxtPasswordWindow.UITxtPasswordEdit;
            WinEdit uITxtPolicyNoEdit = this.UIDownloadWizardWindow.UITxtPolicyNoWindow.UITxtPolicyNoEdit;
            WinButton uIItemButton = this.UIDownloadWizardWindow.UIItemWindow.UIItemButton;
            WinListItem uIItem7667767ListItem = this.UIDownloadWizardWindow.UILvwSummaryList.UIItem7667767ListItem;
            WinList uILvwSummaryList = this.UIDownloadWizardWindow.UILvwSummaryWindow.UILvwSummaryList;
            WinButton uICloseButton = this.UIDownloadWizardWindow.UICloseWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIWinLegacyWindow.UIWinLegacyTitleBar.UICloseButton;

            WinButton uIOptionsButton = this.UIDownloadWizardWindow.UIOptionsWindow.UIOptionsButton;
            WinEdit uITxtFullPathEdit = this.UISelectDownloadExecutWindow.UIDArvindSoftwaresQTODWindow.UITxtFullPathEdit;
            WinButton uIOKButton = this.UISelectDownloadExecutWindow.UIOKWindow.UIOKButton;


            #endregion

            // Press keyboard shortcut keys 'Windows + r'
            Keyboard.SendKeys(this.BrighthousePolicyDownloadParams.SendKeys, ModifierKeys.Windows);

            // Select 'C:\Program Files (x86)\MetLife\WinLegacy\WinLegacy.exe' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.BrighthousePolicyDownloadParams.UIOpenComboBoxEditableItem;

            // Type '{Enter}' in 'Open:' text box
            Keyboard.SendKeys(uIOpenEdit, this.BrighthousePolicyDownloadParams.UIOpenEditSendKeys, ModifierKeys.None);

            // Click 'WinLegacy' title bar
            Mouse.Click(uIWinLegacyTitleBar, new Point(76, 5));

            List<PolicyDownloadModel> Policies = new List<PolicyDownloadModel>();
            Utlities util = new Utlities();
            ConfigModel config = new ConfigModel();
            config = util.Getconfig();
            Policies = util.fetchPolicyNo_FromInput();



            if (Policies.Any<PolicyDownloadModel>(obj => obj.distribution == "GenAm"))
            {
                // Click 'Request Policy' button
                Mouse.Click(uIRequestPolicyButton, new Point(55, 15));

                // Select 'GenAm' radio button
                uIGenAmRadioButton.Selected = this.BrighthousePolicyDownloadParams.UIGenAmRadioButtonSelected;

                IEnumerable<PolicyDownloadModel> result = Policies.Where(obj => obj.distribution == "GenAm");

              
                try
                {
                 

                    // Perform subsequent actions for the policy download
                    perform_Policy_Download(result);
                }
                catch (Exception e)
                {
                    Mouse.Click(uICloseButton, new Point(31, 13));
                    foreach (PolicyDownloadModel tmp_model in result)
                    {
                        tmp_model.status = "FAILED--POLICY DOWNLOAD";
                        tmp_model.additional_Comments = "Policy Not Downloaded" + e.Message;
                    }

                }

            }

            if (Policies.Any<PolicyDownloadModel>(obj => obj.distribution == "MLFS"))
            {
                // Click 'Request Policy' button
                Mouse.Click(uIRequestPolicyButton, new Point(55, 15));

                // Select 'MetLife' radio button
                uIMetLifeRadioButton.Selected = this.BrighthousePolicyDownloadParams.UIMetLifeRadioButtonSelected;

                IEnumerable<PolicyDownloadModel> result = Policies.Where(obj => obj.distribution == "MLFS");

                // Click 'Options' button
                Mouse.Click(uIOptionsButton, new Point(33, 10));
                try
                {
                    // Type 'D:\NET\exe.exe' in 'txtFullPath' text box
                    uITxtFullPathEdit.Text = @"D:\GenAM\Utility.exe";

                    // Click 'Ok' button
                    Mouse.Click(uIOKButton, new Point(32, 9));

                    // Perform subsequent actions for the policy download
                    perform_Policy_Download(result);
                }
                catch (Exception e)
                {
                    Mouse.Click(uICloseButton, new Point(31, 13));
                    foreach (PolicyDownloadModel tmp_model in result)
                    {
                        tmp_model.status = "FAILED--POLICY DOWNLOAD";
                        tmp_model.additional_Comments = "Policy Not Downloaded" + e.Message;
                    }

                }
            }

            if (Policies.Any<PolicyDownloadModel>(obj => obj.distribution == "NELICO"))
            {
                // Click 'Request Policy' button
                Mouse.Click(uIRequestPolicyButton, new Point(55, 15));

                // Select 'NELICO' radio button
                uINELICORadioButton.Selected = this.BrighthousePolicyDownloadParams.UINELICORadioButtonSelected;

                IEnumerable<PolicyDownloadModel> result = Policies.Where(obj => obj.distribution == "NELICO");
                try
                {

                    // Click 'Options' button
                    Mouse.Click(uIOptionsButton, new Point(33, 10));

                    // Type 'D:\NET\exe.exe' in 'txtFullPath' text box
                    uITxtFullPathEdit.Text = @"D:\NELICO\Utility.exe";

                    // Click 'Ok' button
                    Mouse.Click(uIOKButton, new Point(32, 9));

                    // Perform subsequent actions for the policy download
                    perform_Policy_Download(result);

                }
                catch (Exception e)
                {
                    Mouse.Click(uICloseButton, new Point(31, 13));
                    foreach (PolicyDownloadModel tmp_model in result)
                    {
                        tmp_model.status = "FAILED--POLICY DOWNLOAD";
                        tmp_model.additional_Comments = "Policy Not Downloaded" + e.Message;
                    }

                }
            }

            if (Policies.Any<PolicyDownloadModel>(obj => obj.distribution == "BrightHouse"))
            {
                // Click 'Request Policy' button
                Mouse.Click(uIRequestPolicyButton, new Point(55, 15));

                // Select 'Brighthouse Financial' radio button
                uIBrighthouseFinancialRadioButton.Selected = this.BrighthousePolicyDownloadParams.UIBrighthouseFinancialRadioButtonSelected;

                IEnumerable<PolicyDownloadModel> result = Policies.Where(obj => obj.distribution == "BrightHouse");
                try
                {
                    // Perform subsequent actions for the policy download
                    perform_Policy_Download(result);
                }
                catch (Exception e)
                {
                    foreach (PolicyDownloadModel tmp_model in result)
                    {
                        tmp_model.status = "FAILED--POLICY DOWNLOAD";
                        tmp_model.additional_Comments = "Policy Not Downloaded" + e.Message;
                    }
                }


            }
            util.SaveLog(Policies);

            //Should be closed 


        }

        #region Properties
        public virtual BrighthousePolicyDownloadParams BrighthousePolicyDownloadParams
        {
            get
            {
                if ((this.mBrighthousePolicyDownloadParams == null))
                {
                    this.mBrighthousePolicyDownloadParams = new BrighthousePolicyDownloadParams();
                }
                return this.mBrighthousePolicyDownloadParams;
            }
        }



        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }

        public UIWinLegacyWindow UIWinLegacyWindow
        {
            get
            {
                if ((this.mUIWinLegacyWindow == null))
                {
                    this.mUIWinLegacyWindow = new UIWinLegacyWindow();
                }
                return this.mUIWinLegacyWindow;
            }
        }

        public UIDownloadWizardWindow UIDownloadWizardWindow
        {
            get
            {
                if ((this.mUIDownloadWizardWindow == null))
                {
                    this.mUIDownloadWizardWindow = new UIDownloadWizardWindow();
                }
                return this.mUIDownloadWizardWindow;
            }
        }


        public UISelectDownloadExecutWindow UISelectDownloadExecutWindow
        {
            get
            {
                if ((this.mUISelectDownloadExecutWindow == null))
                {
                    this.mUISelectDownloadExecutWindow = new UISelectDownloadExecutWindow();
                }
                return this.mUISelectDownloadExecutWindow;
            }
        }
        #endregion

        #region Fields
        private BrighthousePolicyDownloadParams mBrighthousePolicyDownloadParams;

        private UIRunWindow mUIRunWindow;

        private UIWinLegacyWindow mUIWinLegacyWindow;

        private UIDownloadWizardWindow mUIDownloadWizardWindow;

        private UISelectDownloadExecutWindow mUISelectDownloadExecutWindow;
        #endregion
    }


    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDArvindSoftwaresQTODWindow : WinWindow
    {

        public UIDArvindSoftwaresQTODWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtFullPath";
            this.WindowTitles.Add("Select Download Executable to use for these policies.");
            #endregion
        }

        #region Properties
        public WinEdit UITxtFullPathEdit
        {
            get
            {
                if ((this.mUITxtFullPathEdit == null))
                {
                    this.mUITxtFullPathEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtFullPathEdit.WindowTitles.Add("Select Download Executable to use for these policies.");
                    #endregion
                }
                return this.mUITxtFullPathEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtFullPathEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISelectDownloadExecutWindow : WinWindow
    {

        public UISelectDownloadExecutWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Download Executable to use for these policies.";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select Download Executable to use for these policies.");
            #endregion
        }

        #region Properties
        public UIDArvindSoftwaresQTODWindow UIDArvindSoftwaresQTODWindow
        {
            get
            {
                if ((this.mUIDArvindSoftwaresQTODWindow == null))
                {
                    this.mUIDArvindSoftwaresQTODWindow = new UIDArvindSoftwaresQTODWindow(this);
                }
                return this.mUIDArvindSoftwaresQTODWindow;
            }
        }

        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }

        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion

        #region Fields
        private UIDArvindSoftwaresQTODWindow mUIDArvindSoftwaresQTODWindow;

        private UIOKWindow mUIOKWindow;

        private UICancelWindow mUICancelWindow;

        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'BrighthousePolicyDownload'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BrighthousePolicyDownloadParams
    {

        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + r'
        /// </summary>
        public string SendKeys = "r";

        /// <summary>
        /// Select 'C:\Program Files (x86)\MetLife\WinLegacy\WinLegacy.exe' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "C:\\Program Files (x86)\\MetLife\\WinLegacy\\WinLegacy.exe";

        /// <summary>
        /// Type '{Enter}' in 'Open:' text box
        /// </summary>
        public string UIOpenEditSendKeys = "{Enter}";

        /// <summary>
        /// Select 'MetLife' radio button
        /// </summary>
        public bool UIMetLifeRadioButtonSelected = true;

        /// <summary>
        /// Select 'GenAm' radio button
        /// </summary>
        public bool UIGenAmRadioButtonSelected = true;

        /// <summary>
        /// Select 'NELICO' radio button
        /// </summary>
        public bool UINELICORadioButtonSelected = true;

        /// <summary>
        /// Select 'Brighthouse Financial' radio button
        /// </summary>
        public bool UIBrighthouseFinancialRadioButtonSelected = true;

        /// <summary>
        /// Select 'MetLife' radio button
        /// </summary>
        public bool UIMetLifeRadioButtonSelected1 = true;

        /// <summary>
        /// Select 'GenAm' radio button
        /// </summary>
        public bool UIGenAmRadioButtonSelected1 = true;

        /// <summary>
        /// Select 'NELICO' radio button
        /// </summary>
        public bool UINELICORadioButtonSelected1 = true;

        /// <summary>
        /// Select 'Brighthouse Financial' radio button
        /// </summary>
        public bool UIBrighthouseFinancialRadioButtonSelected1 = true;

        /// <summary>
        /// Type 'arvind' in 'txtUserId' text box
        /// </summary>
        public string UITxtUserIdEditText = "10190163";

        /// <summary>
        /// Type '{Tab}' in 'txtUserId' text box
        /// </summary>
        public string UITxtUserIdEditSendKeys = "{Tab}";

        /// <summary>
        /// Type '********' in 'txtPassword' text box
        /// </summary>
        public string UITxtPasswordEditSendKeys = "5rIz6/z0LWdfniASQK6intuBED++Fhic";

        /// <summary>
        /// Type '7667767' in 'txtPolicyNo' text box
        /// </summary>
        public string UITxtPolicyNoEditText = "7667767";

        /// <summary>
        /// Type '7877878' in 'txtPolicyNo' text box
        /// </summary>
        public string UITxtPolicyNoEditText1 = "7877878";

        /// <summary>
        /// Type '7898585' in 'txtPolicyNo' text box
        /// </summary>
        public string UITxtPolicyNoEditText2 = "7898585";

        /// <summary>
        /// Select '7898585' in 'lvwSummary' list box
        /// </summary>
        public string UILvwSummaryListSelectedItemsAsString = "7898585";
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRunWindow : WinWindow
    {

        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }

        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }

        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion

        #region Fields
        private UIItemWindow mUIItemWindow;

        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {

        public UIItemWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }

        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion

        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {

        public UICancelWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button3";
            this.WindowTitles.Add("Select Download Executable to use for these policies.");
            #endregion
        }

        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Select Download Executable to use for these policies.");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {

        public UIItemWindow1(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }

        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWinLegacyWindow : WinWindow
    {

        public UIWinLegacyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "WinLegacy";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WinLegacy");
            #endregion
        }

        #region Properties
        public UIWinLegacyTitleBar UIWinLegacyTitleBar
        {
            get
            {
                if ((this.mUIWinLegacyTitleBar == null))
                {
                    this.mUIWinLegacyTitleBar = new UIWinLegacyTitleBar(this);
                }
                return this.mUIWinLegacyTitleBar;
            }
        }

        public UI_mainToolStripToolBar UI_mainToolStripToolBar
        {
            get
            {
                if ((this.mUI_mainToolStripToolBar == null))
                {
                    this.mUI_mainToolStripToolBar = new UI_mainToolStripToolBar(this);
                }
                return this.mUI_mainToolStripToolBar;
            }
        }
        #endregion

        #region Fields
        private UIWinLegacyTitleBar mUIWinLegacyTitleBar;

        private UI_mainToolStripToolBar mUI_mainToolStripToolBar;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWinLegacyTitleBar : WinTitleBar
    {

        public UIWinLegacyTitleBar(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("WinLegacy");
            #endregion
        }

        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("WinLegacy");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_mainToolStripToolBar : WinToolBar
    {

        public UI_mainToolStripToolBar(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("WinLegacy");
            #endregion
        }

        #region Properties
        public WinButton UIRequestPolicyButton
        {
            get
            {
                if ((this.mUIRequestPolicyButton == null))
                {
                    this.mUIRequestPolicyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRequestPolicyButton.SearchProperties[WinButton.PropertyNames.Name] = "Request Policy";
                    this.mUIRequestPolicyButton.WindowTitles.Add("WinLegacy");
                    #endregion
                }
                return this.mUIRequestPolicyButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIRequestPolicyButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDownloadWizardWindow : WinWindow
    {

        public UIDownloadWizardWindow()
        {
            #region Search Criteria
            //   this.SearchProperties[WinWindow.PropertyNames.Name] = "Download Wizard";
            this.SearchProperties.Add(WinWindow.PropertyNames.Name, "Download Wizard", PropertyExpressionOperator.Contains);
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            //   this.WindowTitles.Add("Download Wizard");
            //   this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public UIMetLifeWindow UIMetLifeWindow
        {
            get
            {
                if ((this.mUIMetLifeWindow == null))
                {
                    this.mUIMetLifeWindow = new UIMetLifeWindow(this);
                }
                return this.mUIMetLifeWindow;
            }
        }

        public UITxtAlphaWindow UITxtAlphaWindow
        {
            get
            {
                if ((this.mUITxtAlphaWindow == null))
                {
                    this.mUITxtAlphaWindow = new UITxtAlphaWindow(this);
                }
                return this.mUITxtAlphaWindow;
            }
        }

        public UIDOBWindow UIDOBWindow
        {
            get
            {
                if ((this.mUIDOBWindow == null))
                {
                    this.mUIDOBWindow = new UIDOBWindow(this);
                }
                return this.mUIDOBWindow;
            }
        }

        public UIOptionsWindow UIOptionsWindow
        {
            get
            {
                if ((this.mUIOptionsWindow == null))
                {
                    this.mUIOptionsWindow = new UIOptionsWindow(this);
                }
                return this.mUIOptionsWindow;
            }
        }

        public UIGenAmWindow UIGenAmWindow
        {
            get
            {
                if ((this.mUIGenAmWindow == null))
                {
                    this.mUIGenAmWindow = new UIGenAmWindow(this);
                }
                return this.mUIGenAmWindow;
            }
        }

        public UINELICOWindow UINELICOWindow
        {
            get
            {
                if ((this.mUINELICOWindow == null))
                {
                    this.mUINELICOWindow = new UINELICOWindow(this);
                }
                return this.mUINELICOWindow;
            }
        }

        public UIBrighthouseFinancialWindow UIBrighthouseFinancialWindow
        {
            get
            {
                if ((this.mUIBrighthouseFinancialWindow == null))
                {
                    this.mUIBrighthouseFinancialWindow = new UIBrighthouseFinancialWindow(this);
                }
                return this.mUIBrighthouseFinancialWindow;
            }
        }

        public UINextWindow UINextWindow
        {
            get
            {
                if ((this.mUINextWindow == null))
                {
                    this.mUINextWindow = new UINextWindow(this);
                }
                return this.mUINextWindow;
            }
        }

        public UIEnterProducerWebsiteGroup UIEnterProducerWebsiteGroup
        {
            get
            {
                if ((this.mUIEnterProducerWebsiteGroup == null))
                {
                    this.mUIEnterProducerWebsiteGroup = new UIEnterProducerWebsiteGroup(this);
                }
                return this.mUIEnterProducerWebsiteGroup;
            }
        }

        public UITxtUserIdWindow UITxtUserIdWindow
        {
            get
            {
                if ((this.mUITxtUserIdWindow == null))
                {
                    this.mUITxtUserIdWindow = new UITxtUserIdWindow(this);
                }
                return this.mUITxtUserIdWindow;
            }
        }

        public UITxtPasswordWindow UITxtPasswordWindow
        {
            get
            {
                if ((this.mUITxtPasswordWindow == null))
                {
                    this.mUITxtPasswordWindow = new UITxtPasswordWindow(this);
                }
                return this.mUITxtPasswordWindow;
            }
        }

        public UITxtPolicyNoWindow UITxtPolicyNoWindow
        {
            get
            {
                if ((this.mUITxtPolicyNoWindow == null))
                {
                    this.mUITxtPolicyNoWindow = new UITxtPolicyNoWindow(this);
                }
                return this.mUITxtPolicyNoWindow;
            }
        }

        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }

        public UILvwSummaryList UILvwSummaryList
        {
            get
            {
                if ((this.mUILvwSummaryList == null))
                {
                    this.mUILvwSummaryList = new UILvwSummaryList(this);
                }
                return this.mUILvwSummaryList;
            }
        }

        public UILvwSummaryWindow UILvwSummaryWindow
        {
            get
            {
                if ((this.mUILvwSummaryWindow == null))
                {
                    this.mUILvwSummaryWindow = new UILvwSummaryWindow(this);
                }
                return this.mUILvwSummaryWindow;
            }
        }

        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion

        #region Fields
        private UIMetLifeWindow mUIMetLifeWindow;

        private UIGenAmWindow mUIGenAmWindow;

        private UINELICOWindow mUINELICOWindow;

        private UIBrighthouseFinancialWindow mUIBrighthouseFinancialWindow;

        private UINextWindow mUINextWindow;

        private UIEnterProducerWebsiteGroup mUIEnterProducerWebsiteGroup;

        private UITxtUserIdWindow mUITxtUserIdWindow;

        private UIOptionsWindow mUIOptionsWindow;

        private UITxtPasswordWindow mUITxtPasswordWindow;

        private UITxtPolicyNoWindow mUITxtPolicyNoWindow;

        private UIItemWindow2 mUIItemWindow;

        private UILvwSummaryList mUILvwSummaryList;

        private UILvwSummaryWindow mUILvwSummaryWindow;

        private UICloseWindow mUICloseWindow;

        private UIDOBWindow mUIDOBWindow;

        private UITxtAlphaWindow mUITxtAlphaWindow;
        #endregion
    }


    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITxtAlphaWindow : WinWindow
    {

        public UITxtAlphaWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtAlpha";
            this.WindowTitles.Add("Download Wizard ( MetLife )");
            #endregion
        }

        #region Properties
        public WinEdit UITxtAlphaEdit
        {
            get
            {
                if ((this.mUITxtAlphaEdit == null))
                {
                    this.mUITxtAlphaEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtAlphaEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Alpha:";
                    this.mUITxtAlphaEdit.WindowTitles.Add("Download Wizard ( MetLife )");
                    #endregion
                }
                return this.mUITxtAlphaEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtAlphaEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOptionsWindow : WinWindow
    {

        public UIOptionsWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnNEFOptions";
            this.WindowTitles.Add("Download Wizard");
            #endregion
        }

        #region Properties
        public WinButton UIOptionsButton
        {
            get
            {
                if ((this.mUIOptionsButton == null))
                {
                    this.mUIOptionsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOptionsButton.SearchProperties[WinButton.PropertyNames.Name] = "Options";
                    this.mUIOptionsButton.WindowTitles.Add("Download Wizard");
                    #endregion
                }
                return this.mUIOptionsButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIOptionsButton;
        #endregion
    }


    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMetLifeWindow : WinWindow
    {

        public UIMetLifeWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtnMLFS";
            this.WindowTitles.Add("Download Wizard");
            #endregion
        }

        #region Properties
        public WinRadioButton UIMetLifeRadioButton
        {
            get
            {
                if ((this.mUIMetLifeRadioButton == null))
                {
                    this.mUIMetLifeRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIMetLifeRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "MetLife";
                    this.mUIMetLifeRadioButton.WindowTitles.Add("Download Wizard");
                    #endregion
                }
                return this.mUIMetLifeRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIMetLifeRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGenAmWindow : WinWindow
    {

        public UIGenAmWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtnGenAm";
            this.WindowTitles.Add("Download Wizard");
            #endregion
        }

        #region Properties
        public WinRadioButton UIGenAmRadioButton
        {
            get
            {
                if ((this.mUIGenAmRadioButton == null))
                {
                    this.mUIGenAmRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIGenAmRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "GenAm";
                    this.mUIGenAmRadioButton.WindowTitles.Add("Download Wizard");
                    #endregion
                }
                return this.mUIGenAmRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIGenAmRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINELICOWindow : WinWindow
    {

        public UINELICOWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtnNEF";
            this.WindowTitles.Add("Download Wizard");
            #endregion
        }

        #region Properties
        public WinRadioButton UINELICORadioButton
        {
            get
            {
                if ((this.mUINELICORadioButton == null))
                {
                    this.mUINELICORadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUINELICORadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "NELICO";
                    this.mUINELICORadioButton.WindowTitles.Add("Download Wizard");
                    #endregion
                }
                return this.mUINELICORadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUINELICORadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBrighthouseFinancialWindow : WinWindow
    {

        public UIBrighthouseFinancialWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtnTLA";
            this.WindowTitles.Add("Download Wizard");
            #endregion
        }

        #region Properties
        public WinRadioButton UIBrighthouseFinancialRadioButton
        {
            get
            {
                if ((this.mUIBrighthouseFinancialRadioButton == null))
                {
                    this.mUIBrighthouseFinancialRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIBrighthouseFinancialRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Brighthouse Financial";
                    this.mUIBrighthouseFinancialRadioButton.WindowTitles.Add("Download Wizard");
                    #endregion
                }
                return this.mUIBrighthouseFinancialRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIBrighthouseFinancialRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINextWindow : WinWindow
    {

        public UINextWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnNext";
            this.WindowTitles.Add("Download Wizard");
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Download Wizard");
                    this.mUINextButton.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUINextButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEnterProducerWebsiteGroup : WinGroup
    {

        public UIEnterProducerWebsiteGroup(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Enter Producer Website Access Information";
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinWindow UITxtUserIdWindow
        {
            get
            {
                if ((this.mUITxtUserIdWindow == null))
                {
                    this.mUITxtUserIdWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITxtUserIdWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Password:";
                    this.mUITxtUserIdWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITxtUserIdWindow.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUITxtUserIdWindow;
            }
        }
        #endregion

        #region Fields
        private WinWindow mUITxtUserIdWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITxtUserIdWindow : WinWindow
    {

        public UITxtUserIdWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtUserId";
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinEdit UITxtUserIdEdit
        {
            get
            {
                if ((this.mUITxtUserIdEdit == null))
                {
                    this.mUITxtUserIdEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtUserIdEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password:";
                    this.mUITxtUserIdEdit.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUITxtUserIdEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtUserIdEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITxtPasswordWindow : WinWindow
    {

        public UITxtPasswordWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPassword";
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinEdit UITxtPasswordEdit
        {
            get
            {
                if ((this.mUITxtPasswordEdit == null))
                {
                    this.mUITxtPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtPasswordEdit.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUITxtPasswordEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtPasswordEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITxtPolicyNoWindow : WinWindow
    {

        public UITxtPolicyNoWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPolicyNo";
            this.SearchProperties.Add(WinWindow.PropertyNames.Name, "Download Wizard", PropertyExpressionOperator.Contains);
            //   this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinEdit UITxtPolicyNoEdit
        {
            get
            {
                if ((this.mUITxtPolicyNoEdit == null))
                {
                    this.mUITxtPolicyNoEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtPolicyNoEdit.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUITxtPolicyNoEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtPolicyNoEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {

        public UIItemWindow2(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddNew";
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = ">";
                    this.mUIItemButton.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILvwSummaryList : WinList
    {

        public UILvwSummaryList(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Downloaded Policies";
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinListItem UIItem7667767ListItem
        {
            get
            {
                if ((this.mUIItem7667767ListItem == null))
                {
                    this.mUIItem7667767ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItem7667767ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "7667767";
                    this.mUIItem7667767ListItem.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUIItem7667767ListItem;
            }
        }
        #endregion

        #region Fields
        private WinListItem mUIItem7667767ListItem;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILvwSummaryWindow : WinWindow
    {

        public UILvwSummaryWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lvwSummary";
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinList UILvwSummaryList
        {
            get
            {
                if ((this.mUILvwSummaryList == null))
                {
                    this.mUILvwSummaryList = new WinList(this);
                    #region Search Criteria
                    this.mUILvwSummaryList.SearchProperties[WinList.PropertyNames.Name] = "Downloaded Policies";
                    this.mUILvwSummaryList.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUILvwSummaryList;
            }
        }
        #endregion

        #region Fields
        private WinList mUILvwSummaryList;
        #endregion
    }
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {

        public UIOKWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button2";
            this.WindowTitles.Add("Select Download Executable to use for these policies.");
            #endregion
        }

        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Select Download Executable to use for these policies.");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDOBWindow : WinWindow
    {

        public UIDOBWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtDOB";
            this.WindowTitles.Add("Download Wizard ( MetLife )");
            #endregion
        }

        #region Properties
        public WinEdit UITxtDOBEdit
        {
            get
            {
                if ((this.mUITxtDOBEdit == null))
                {
                    this.mUITxtDOBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtDOBEdit.WindowTitles.Add("Download Wizard ( MetLife )");
                    #endregion
                }
                return this.mUITxtDOBEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtDOBEdit;
        #endregion
    }


    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICloseWindow : WinWindow
    {

        public UICloseWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
            #endregion
        }

        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Download Wizard ( Brighthouse Financial )");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
